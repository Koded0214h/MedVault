# Generated by Django 5.2.7 on 2025-10-22 08:30

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('inventory', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContextData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(max_length=100)),
                ('data_type', models.CharField(choices=[('weather', 'Weather'), ('disease_trend', 'Disease Trend'), ('public_health_alert', 'Public Health Alert'), ('seasonal', 'Seasonal'), ('economic', 'Economic')], max_length=30)),
                ('temperature', models.FloatField(blank=True, null=True)),
                ('humidity', models.FloatField(blank=True, null=True)),
                ('rainfall', models.FloatField(blank=True, null=True)),
                ('disease_name', models.CharField(blank=True, max_length=100, null=True)),
                ('case_count', models.IntegerField(blank=True, null=True)),
                ('trend_direction', models.CharField(blank=True, choices=[('up', 'Up'), ('down', 'Down'), ('stable', 'Stable')], max_length=10, null=True)),
                ('alert_level', models.CharField(blank=True, choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], max_length=20, null=True)),
                ('alert_message', models.TextField(blank=True, null=True)),
                ('effective_date', models.DateTimeField()),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
                ('confidence_score', models.FloatField(default=1.0)),
                ('source', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='MCPConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('shortage_alert_threshold', models.FloatField(default=0.8)),
                ('critical_alert_threshold', models.FloatField(default=0.9)),
                ('demand_data_weight', models.FloatField(default=0.4)),
                ('supply_data_weight', models.FloatField(default=0.4)),
                ('context_data_weight', models.FloatField(default=0.2)),
                ('prediction_horizon_days', models.IntegerField(default=14)),
                ('retraining_frequency_hours', models.IntegerField(default=24)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ShortagePrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(max_length=100)),
                ('predicted_shortage_date', models.DateTimeField()),
                ('confidence_score', models.FloatField()),
                ('severity_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('predicted_shortage_duration', models.IntegerField()),
                ('affected_population_estimate', models.IntegerField(blank=True, null=True)),
                ('demand_increase_reason', models.TextField(blank=True, null=True)),
                ('supply_constraint_reason', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('medical_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.medicalitem')),
            ],
            options={
                'unique_together': {('medical_item', 'region', 'predicted_shortage_date')},
            },
        ),
        migrations.CreateModel(
            name='PredictionAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('shortage_predicted', 'Shortage Predicted'), ('shortage_imminent', 'Shortage Imminent'), ('shortage_resolved', 'Shortage Resolved')], max_length=30)),
                ('message', models.TextField()),
                ('recommended_actions', models.TextField(blank=True, null=True)),
                ('notify_vendors', models.BooleanField(default=True)),
                ('notify_health_authorities', models.BooleanField(default=True)),
                ('notify_public', models.BooleanField(default=False)),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('is_sent', models.BooleanField(default=False)),
                ('prediction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='mcp.shortageprediction')),
            ],
        ),
        migrations.CreateModel(
            name='DemandData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.CharField(max_length=100)),
                ('demand_count', models.IntegerField()),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('season', models.CharField(blank=True, max_length=50, null=True)),
                ('disease_outbreak', models.BooleanField(default=False)),
                ('outbreak_disease', models.CharField(blank=True, max_length=100, null=True)),
                ('collected_at', models.DateTimeField(auto_now_add=True)),
                ('medical_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.medicalitem')),
            ],
            options={
                'unique_together': {('medical_item', 'region', 'period_start')},
            },
        ),
    ]
